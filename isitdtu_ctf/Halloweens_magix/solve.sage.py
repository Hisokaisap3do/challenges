

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_32 = Integer(32); _sage_const_16 = Integer(16); _sage_const_1 = Integer(1)
from struct import pack, unpack


def bytes2matrix(b):
    return [list(map(lambda x: x, list(b[i:i+_sage_const_4 ]))) for i in range(_sage_const_0 , len(b), _sage_const_4 )]


def matrix2bytes(m):
    return b''.join(map(lambda x: b''.join(map(lambda y: pack('!H', y), x)), m))


def m2b(m):
    return bytes([j for i in m for j in i])

def b2m(b):
    T = [unpack("!H", b[i:i+_sage_const_2 ])[_sage_const_0 ] for i in range(_sage_const_0 , len(b), _sage_const_2 )]
    M = [T[i:i+_sage_const_4 ] for i in range(_sage_const_0 , len(T), _sage_const_4 )]
    return matrix(M)


def main():
    enc = open("flag.png.enc", "rb").read()
    out = open("solve.png", 'wb')

    P = matrix(bytes2matrix(b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR'))
    C = b2m(enc[:_sage_const_32 ])
    key = P.solve_right(C)

    for i in range(_sage_const_0 , len(enc), _sage_const_16 ):
        C = b2m(enc[i:i+_sage_const_16 ])
        out.write(m2b(C * key**-_sage_const_1 ))


if __name__ == '__main__':
    main()

