

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_128 = Integer(128); _sage_const_2 = Integer(2); _sage_const_64 = Integer(64); _sage_const_18 = Integer(18); _sage_const_0 = Integer(0); _sage_const_8192 = Integer(8192); _sage_const_8002 = Integer(8002); _sage_const_1 = Integer(1)
from Crypto.Util.number import *
def check():
    global cts
    M = ZZ**_sage_const_128 
    C = VectorSpaces(FiniteField(_sage_const_2 ))
    t = [u[:_sage_const_128 ] for u in cts]
    W = M.submodule(t)
    J = C(W).basis_matrix()
    print(J.ncols(), J.nrows())
    if J.nrows() == len(cts):
        if len(cts) == _sage_const_64 :
            return True
        else:
            return False
    else:
        cts.pop()
        return False
    
def submit(res):
    c.sendlineafter('>', '1')
    payload = long_to_bytes(int(res, _sage_const_2 )).hex()
    print(payload, res)
    c.sendlineafter(':', payload)
    print(c.recvline())

def get_ct():
    c.sendlineafter('> ', '2')
    resp = c.recvline().strip()
    return resp[_sage_const_18 :].decode()

def convert(ct):
    return ([_sage_const_0 ]*_sage_const_8192  + list(map(int, bin(bytes_to_long(bytes.fromhex(ct)))[_sage_const_2 :])))[-_sage_const_8192 :]

from pwn import *
c = remote('34.132.73.130', _sage_const_8002 )
cts = []
while True:
    ct = convert(get_ct())
    assert len(ct) == _sage_const_8192 
    cts.append(ct)
    if check():
        break

def reverse_bit(st):
    st = st.replace('0', '2').replace('1', '0').replace('2', '1')
    return st

ct = cts[_sage_const_1 ]
res = ''
for i in tqdm(range(_sage_const_0 , len(ct), _sage_const_128 )):
    tmp = ct[i:i+_sage_const_128 ]  
    M = ZZ**_sage_const_128 
    C = VectorSpaces(FiniteField(_sage_const_2 ))
    t = [u[:_sage_const_128 ] for u in cts] + [tmp]
    W = M.submodule(t)
    J = C(W).basis_matrix()
    if J.nrows() == _sage_const_64 :
        res += '0'
    else:
        res += '1'
print(res)
submit(res)
submit(reverse_bit(res))

